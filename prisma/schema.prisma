generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String?
  email          String     @unique
  emailVerified  DateTime?  @map("email_verified")
  hashedPassword String?    @map("hashed_password")
  image          String?
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  documents      Document[]

  @@map("users")
}

model Account {
  userId            String   @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id               String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  title            String        @map("title")
  userId           String        @map("user_id") @db.Uuid
  isArchived       Boolean       @default(false) @map("is_archived")
  parentDocumentId String?       @map("parent_document_id")
  content          String?       @map("content")
  coverImage       String?       @map("cover_image")
  icon             String?       @map("icon")
  isPublished      Boolean       @default(false) @map("is_published")
  type             DocumentType? @map("type")
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum DocumentType {
  DOCUMENT
  KANBAN
}
